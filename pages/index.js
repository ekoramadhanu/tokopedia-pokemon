import Head from 'next/head';
import * as React from 'react';
import { gql } from '@apollo/client';
import client from '../plugin/apollo';
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import Paper from '@mui/material/Paper';
import Pagination from '@mui/material/Pagination';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import Link from 'next/link';
import {useQuery } from 'react-query';
import Skeleton from '@mui/material/Skeleton';

const GET_POKEMONS = gql`
  query pokemons($limit: Int, $offset: Int) {
    pokemons(limit: $limit, offset: $offset) {
      count
      nextOffset
      prevOffset
      status
      message
      results {
        id
        name
        image
      }
    }
  }
`;
const fetchPokemon = async (page) => {
  const { data } = await client.query({
    query: GET_POKEMONS,
    variables: {
      limit: 20,
      offset: page,
    },
  });
  return data;
};

function MyApp() {
  // state
  const [limit, setLimit] = React.useState(20);
  const [offset, setOffset] = React.useState(0);
  const [page, setPage] = React.useState(1);
  const {data, isLoading} = useQuery(['data', offset], () => fetchPokemon(offset));

  const countData = (value) => {
    if (value % limit === 0) {
      return value / limit;
    } else {
      return (value - (value % limit)) / limit + 1;
    }
  };
  const countPokemon = (value) => {
    if (localStorage.getItem("count") === null) {
      return 0;
    } else {
      const countData = JSON.parse(localStorage.getItem("count"));
      if (countData[value] != undefined) {
        return countData[value];
      } else {
        return 0;
      }
    }
  }

  const handleChange = async(event, value) => {
    await setPage(value);
    await setOffset((value - 1) * limit);
  };
  if (isLoading) {
    return (
      <div>
        <Head>
          <title> Pokemon | Daftar</title>
          <meta name="viewport" content="initial-scale=1, width=device-width" />
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          <Container component={"div"} sx={{ my: 9 }}>
            <Grid container spacing={1} sx={{ my: 2, display: 'flex', justifyContent: 'center' }}>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={118}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={118}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={300}/>
              </Grid>
              <Grid item  xl={3} lg={3} md={4} sm={6} xs={12}>
                <Skeleton variant="rectangular" height={118}/>
              </Grid>
            </Grid>
          </Container>
        </main>
      </div>
    )
  }

  return (
    <div>
      <Head>
        <title> Pokemon | Daftar</title>
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container component={"div"}>
          <Grid container spacing={1} sx={{ my: 9 }}>
            {data.pokemons.results.map(item => {
              return (
                <Grid item key={item.id} xl={3} lg={3} md={4} sm={6} xs={12}>
                  <Paper elevation={4} key={item.name}>
                    <Link href={`/pokemon/${item.name}`}>
                      <Card sx={{ cursor: 'pointer',height: 400 }}>
                        <CardMedia
                          component="img"
                          height="200"
                          image={item.image}
                          alt={item.name}
                          sx={{ objectFit: 'contain', m: 1 }}
                        />
                        <CardContent>
                          <Typography gutterBottom variant="h4" component="div" align="center">
                            {item.name}
                          </Typography>
                          <Typography gutterBottom variant="subtitle1" component="div" align="center">
                            didapatkan : {countPokemon(item.name)}
                          </Typography>
                        </CardContent>
                      </Card>
                    </Link>
                  </Paper>
                </Grid>
              );
            })}
          </Grid>
          <Box component="div" sx={{ display: { sm: 'block', xs: 'none' } }}>
              <Stack spacing={2} sx={{ mt: 1, mb: 2, flexDirection: 'row-reverse' }}>
                <Pagination
                  count={countData(data.pokemons.count)}
                  page={page}
                  onChange={handleChange}
                  showFirstButton
                  showLastButton
                />
              </Stack>
            </Box>
          <Box component="div" sx={{ display: { sm: 'none', xs: 'block' } }}>
              <Stack spacing={2} sx={{ mt: 1, mb: 9 }}>
                <Pagination
                  count={countData(data.pokemons.count)}
                  page={page}
                  onChange={handleChange}
                  sx={{ mx: 'auto' }}
                  showFirstButton
                  showLastButton
                />
              </Stack>
            </Box>
        </Container>
        {/* <Button variant="text" onClick={(e) => method.buttonClick(e)}>Text</Button> */}
      </main>
    </div>
  );
}

export default MyApp